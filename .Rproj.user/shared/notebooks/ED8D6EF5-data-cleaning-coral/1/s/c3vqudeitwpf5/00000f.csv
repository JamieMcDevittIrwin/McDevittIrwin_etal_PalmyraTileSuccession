"0","# Count the number of corals for each tile (ALL CORALS)"
"0","coral.2014 <- coral_2014 %>%"
"0","  mutate(Convert = ifelse(Polyp.. %in% NA, NA, ""1"")) %>% "
"0","  # convert all the numbers to 1 so you can sum them"
"0","  group_by(Year, Location, Depth, Treatment, Tile.number, Original.Tile.Number, New.Tile.Number) %>%"
"0","  dplyr::summarize(All.corals = sum(!is.na(Convert))) %>% "
"0","  # don't count the NAs (they go to 0)"
"0","  dplyr::arrange(as.numeric(New.Tile.Number)) %>%"
"0","  ungroup()"
"1","`summarise()` has grouped output by 'Year', 'Location', 'Depth', 'Treatment', 'Tile.number', 'Original.Tile.Number'. You can override using the `.groups` argument.
"
"0","# 175 tiles because we filtered out two tiles and two tiles were not measured (3 and 4)"
"0","# looks good (8Feb2022)"
"0",""
"0","unique(coral_2014$Substrate..Flat..edge..divot.)"
"1","[1]"
"1"," NA      "
"1"," ""flat""  "
"1"," ""divot"" "
"1"," ""edge""  "
"1"," ""divot """
"1","
"
"0","# Count the number of corals for each tile (divots vs flat), not differentiating between large and small divots"
"0","coral.divots_2014 <- coral_2014 %>%"
"0","    mutate(Substrate..Flat..edge..divot.= "
"0","           dplyr::recode(Substrate..Flat..edge..divot., ""divot "" = ""divot"", "
"0","                  .default = Substrate..Flat..edge..divot.)) %>% "
"0","  # fix naming issue"
"0","    mutate(Convert = ifelse(Polyp.. %in% NA, NA, ""1"")) %>%"
"0","  # convert all the numbers to 1 so you can sum them"
"0","  group_by(Year, Location, Depth, Treatment, "
"0","           Tile.number, Original.Tile.Number, New.Tile.Number, Pair,"
"0","           Substrate..Flat..edge..divot.) %>%"
"0","  dplyr::summarize(Corals = sum(!is.na(Convert))) %>% "
"0","  # count up all the corals in divot vs flat, etc"
"0","  arrange(as.numeric(New.Tile.Number)) %>%"
"0","  ungroup() %>%"
"0","   pivot_wider(names_from = Substrate..Flat..edge..divot., "
"0","               values_from = Corals) %>% "
"0","  # make the df wide"
"0","   dplyr::select(-""NA"") %>% "
"0","  # get rid of the NA column"
"0","   mutate_all(funs(replace_na(.,0))) "
"1","`summarise()` has grouped output by 'Year', 'Location', 'Depth', 'Treatment', 'Tile.number', 'Original.Tile.Number', 'New.Tile.Number', 'Pair'. You can override using the `.groups` argument.
"
"0","# replace NAs with zero"
"0",""
"0",""
"0","# Make a long version (not differentiating between large and small divots)"
"0","coral.divots_2014.long <- coral.divots_2014 %>%"
"0","  pivot_longer(-c(Year:New.Tile.Number,Pair),"
"0","               names_to = ""Tile.placement"", "
"0","               values_to = ""Corals"")"
"0",""
"0",""
"0","# Small vs large divots"
"0","coral_2014.divot.size <- coral_2014 %>%"
"0","    mutate(Substrate..Flat..edge..divot.= "
"0","           dplyr::recode(Substrate..Flat..edge..divot., ""divot "" = ""divot"", "
"0","                  .default = Substrate..Flat..edge..divot.)) %>% "
"0","  # fix naming issue"
"0","    mutate(Convert = ifelse(Polyp.. %in% NA, NA, ""1"")) %>%"
"0","  mutate(Divot.Size = ifelse(divot.. %in% c(10,11), ""Large.divot"", "
"0","                             ifelse(divot.. %in% c(1:9), ""Small.divot"","
"0","                                    ifelse(Substrate..Flat..edge..divot. %in% ""flat"", ""Flat"","
"0","                                           ifelse(Substrate..Flat..edge..divot. %in% ""edge"", ""Edge"", NA))))) %>%"
"0","  # convert all the numbers to 1 so you can sum them"
"0","  # We know that divots 10 and 11 are large, 1-9 are small"
"0","  group_by(Year, Location, Depth, Treatment, "
"0","           Tile.number, Original.Tile.Number, New.Tile.Number, "
"0","           Divot.Size) %>%"
"0","  dplyr::summarize(Corals = sum(!is.na(Convert))) %>% "
"0","  # count up all the corals in divot vs flat, etc"
"0","  arrange(as.numeric(New.Tile.Number)) %>%"
"0","  ungroup() %>%"
"0","   pivot_wider(names_from = Divot.Size, "
"0","               values_from = Corals) %>% "
"0","  # wide so you can get zeros for the not counted"
"0","   dplyr::select(-""NA"") %>% "
"0","  # get rid of the NA column"
"0","   mutate_all(funs(replace_na(.,0))) "
"1","`summarise()` has grouped output by 'Year', 'Location', 'Depth', 'Treatment', 'Tile.number', 'Original.Tile.Number', 'New.Tile.Number'. You can override using the `.groups` argument.
"
"0","# replace NAs with zero"
"0",""
"0",""
"0","# Make a long version"
"0","coral_2014.divot.size.long <- coral_2014.divot.size  %>%"
"0","  pivot_longer(-c(Year:New.Tile.Number),"
"0","               names_to = ""Tile.placement"", "
"0","               values_to = ""Corals"")"
"0",""
"0",""
"0","# Make one full coral DF with all the data "
"0","# So now this has divot size separated, but also has a column of summed up divots as ""All.divots"", and a column ""All.corals"""
"0","coral.2014_wide <- coral.divots_2014 %>%"
"0","  # this has all.divots column"
"0","   dplyr::select(New.Tile.Number,Pair, flat, divot, edge) %>%"
"0","  # select only a few columns"
"0","   inner_join(coral.2014, by=""New.Tile.Number"") %>%"
"0","  # this has the all.corals column"
"0","  inner_join(coral_2014.divot.size[c(""New.Tile.Number"",""Small.divot"", ""Large.divot"")], "
"0","             by=""New.Tile.Number"") %>%"
"0","  # this has the divots size (small vs. large)"
"0","  relocate(flat, .after = ""Large.divot"")%>%"
"0","  relocate(divot, .after = ""Large.divot"")%>%"
"0","  relocate(edge, .after = ""Large.divot"") %>%"
"0","  relocate(Tile.number:Original.Tile.Number, .after = New.Tile.Number) %>%"
"0","  dplyr::rename(Flat.surface = flat) %>%"
"0","  dplyr::rename(All.divots = divot) %>%"
"0","  dplyr::rename(Edge = edge) %>%"
"0","  mutate(Treatment = ifelse(Treatment %in% ""caged"", ""Caged"", ""Uncaged""))"
"0",""
"0",""
"0","# Long Version (getting rid of all.corals and all.divots)"
"0","coral.2014_long <- coral.2014_wide %>%"
"0","  pivot_longer(-c(New.Tile.Number:Treatment, All.corals,All.divots),"
"0","               names_to= ""Tile.Placement"", values_to= ""Corals"")"
"0",""
"0",""
"0",""
"0","# Long dataset with all divots vs flat surface (no small vs large and no edge)"
"0","coral.2014.divot.flat_long <- coral.2014_wide %>%"
"0","  pivot_longer(-c(New.Tile.Number:Treatment, All.corals:Edge),"
"0","               names_to= ""Tile.Placement"", values_to= ""Corals"") %>%"
"0","  select(-c(All.corals:Edge))"
"0",""
