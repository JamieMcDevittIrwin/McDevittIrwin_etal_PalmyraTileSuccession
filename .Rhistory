arrange(as.numeric(New.Tile.Number))
cover.compare.diversity.2016.uncaged_wide <- cover.compare.diversity.2016_wide %>%
filter(Treatment == "Uncaged") %>%
arrange(as.numeric(New.Tile.Number))
cover.compare.diversity.2016.caged_wide <- cover.compare.diversity.2016_wide %>%
filter(Treatment == "Caged") %>%
arrange(as.numeric(New.Tile.Number))
# Data Only DFs
cover.minor.diversity.2014.uncaged_data <- cover.minor.diversity.2014.uncaged_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(File.Name:New.Site))
cover.minor.diversity.2014.caged_data <- cover.minor.diversity.2014.caged_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(File.Name:New.Site))
cover.compare.diversity.2016.uncaged_data <- cover.compare.diversity.2016.uncaged_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(Year:New.Site))
cover.compare.diversity.2016.caged_data <- cover.compare.diversity.2016.caged_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(Year:New.Site))
##### Uncaged #####
dim(cover.minor.diversity.2014.uncaged_wide) # 89 22
dim(cover.compare.diversity.2016.uncaged_wide)
# create vector of tile numbers in 2016 and 2014
sub.2016 <- cover.compare.diversity.2016.uncaged_wide$New.Tile.Number
sub.2014 <- cover.minor.diversity.2014.uncaged_wide$New.Tile.Number
# Filter out tiles that are only in both
cover.diversity.2014.uncaged.time_wide <- cover.minor.diversity.2014.uncaged_wide %>%
filter(New.Tile.Number %in% sub.2016) %>% # only keep rows that are in 2016 as well
arrange(as.numeric(New.Tile.Number))
dim(cover.diversity.2014.uncaged.time_wide) # 71 tiles
cover.diversity.2016.uncaged.time_wide <- cover.compare.diversity.2016.uncaged_wide %>%
filter(New.Tile.Number %in% sub.2014) %>% # only keep rows that are in 2014 as well
arrange(as.numeric(New.Tile.Number))
dim(cover.diversity.2016.uncaged.time_wide) # 71 tiles
# Add cover categories that are missing from each dataframe
# Overall Uncaged
timeseries.cover.uncaged_wide <- plyr::rbind.fill(cover.diversity.2014.uncaged.time_wide, cover.diversity.2016.uncaged.time_wide) %>%
select(-File.Name) %>%
replace(is.na(.), 0) %>%
mutate(New.Tile.Number.Year = paste(New.Tile.Number, Year, sep= "_")) %>%
select(New.Tile.Number.Year, New.Tile.Number:MACA6) %>% # reorder
arrange(as.numeric(New.Tile.Number))
# Split into each year
timeseries.cover.uncaged.2014_wide <- timeseries.cover.uncaged_wide %>%
filter(Year == "2014") %>%
arrange(as.numeric(New.Tile.Number))
timeseries.cover.uncaged.2016_wide <- timeseries.cover.uncaged_wide %>%
filter(Year == "2016") %>%
arrange(as.numeric(New.Tile.Number))
# Data Only
timeseries.cover.uncaged.2014_data <- timeseries.cover.uncaged.2014_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(New.Tile.Number.Year:New.Site))
dim(timeseries.cover.uncaged.2014_data) # 71 18
timeseries.cover.uncaged.2016_data <- timeseries.cover.uncaged.2016_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(New.Tile.Number.Year:New.Site))
dim(timeseries.cover.uncaged.2016_data) # 71 18
##### Caged #####
dim(cover.minor.diversity.2014.caged_wide) # 90 22
dim(cover.compare.diversity.2016.caged_wide) # 67 24
# create vector of tile numbers in 2016 and 2014
sub.2016 <- cover.compare.diversity.2016.caged_wide$New.Tile.Number
sub.2014 <- cover.minor.diversity.2014.caged_wide$New.Tile.Number
# Filter out tiles that are only in both
cover.diversity.2014.caged.time_wide <- cover.minor.diversity.2014.caged_wide %>%
filter(New.Tile.Number %in% sub.2016) %>% # only keep rows that are in 2016 as well
arrange(as.numeric(New.Tile.Number))
dim(cover.diversity.2014.caged.time_wide) # 67 tiles
cover.diversity.2016.caged.time_wide <- cover.compare.diversity.2016.caged_wide %>%
filter(New.Tile.Number %in% sub.2014) %>% # only keep rows that are in 2014 as well
arrange(as.numeric(New.Tile.Number))
dim(cover.diversity.2016.caged.time_wide) # 67 tiles
# Add cover categories that are missing from each dataframe
# Overall Uncaged
timeseries.cover.caged_wide <- plyr::rbind.fill(cover.diversity.2014.caged.time_wide, cover.diversity.2016.caged.time_wide) %>%
select(-File.Name) %>%
replace(is.na(.), 0) %>%
mutate(New.Tile.Number.Year = paste(New.Tile.Number, Year, sep= "_")) %>%
select(New.Tile.Number.Year, New.Tile.Number:MACA6) %>% # reorder
arrange(as.numeric(New.Tile.Number))
# Split into each year
timeseries.cover.caged.2014_wide <- timeseries.cover.caged_wide %>%
filter(Year == "2014") %>%
arrange(as.numeric(New.Tile.Number))
timeseries.cover.caged.2016_wide <- timeseries.cover.caged_wide %>%
filter(Year == "2016") %>%
arrange(as.numeric(New.Tile.Number))
# Data Only
timeseries.cover.caged.2014_data <- timeseries.cover.caged.2014_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(New.Tile.Number.Year:New.Site))
timeseries.cover.caged.2016_data <- timeseries.cover.caged.2016_wide %>%
column_to_rownames(var ="New.Tile.Number") %>%
select(-c(New.Tile.Number.Year:New.Site))
##### Combine Caged and Uncaged ######
dim(timeseries.cover.caged_wide)
dim(timeseries.cover.uncaged_wide)
times.series.ALL_wide <- plyr::rbind.fill(timeseries.cover.caged_wide,
timeseries.cover.uncaged_wide)
times.series.ALL_data <- times.series.ALL_wide %>%
column_to_rownames(var= "New.Tile.Number.Year") %>%
select(-c(New.Tile.Number:New.Site))
library(tidyverse);library(ggpubr);library(janitor);library(vegan);library(plotrix);library(ggvegan)
### Coral
# 2 Week In Situ Coral Recruitment (2013)
coral_2013 <- read.csv("../data/raw/2013_2week_InSituCoralCount/2 week review in situ coral settlement.csv",stringsAsFactors = FALSE,na.strings=c("","NA"))
# 1 year after installation (2014) and 3 years after installation (2016), lab based coral counts
coral_2014.2016 <- read.csv("../data/raw/2014&2016/LabCoralCount/2014_2016 Data.csv",stringsAsFactors = FALSE,na.strings=c("","NA"))
### Coral IDs
coral.id.2014 <- read.csv("../data/raw/2014&2016/Taxonomic_IDS/Divot recruits identified.2014.csv",stringsAsFactors = FALSE,na.strings=c("","NA"))
coral.id.2016 <- read.csv("../data/raw/2014&2016/Taxonomic_IDS/Divot recruits identified.2016.csv",stringsAsFactors = FALSE,na.strings=c("","NA"))
# Metadata
metadata <- read.csv("../data/raw/Tile_Metadata.csv",stringsAsFactors = FALSE,na.strings=c("","NA"))
##### Clean the metadata #####
metadata <- metadata %>%
mutate(New.Site = ifelse(Site %in% "F3", "FR3",
ifelse(Site %in% "F7", "FR7",
ifelse(Site %in% "F9", "FR9",
ifelse(Site %in% "FR3", "FR3",
ifelse(Site %in% "FR7", "FR7","FR9")))))) %>%
mutate(Treatment= dplyr::recode(Treatment,
"caged" = "Caged",
"uncaged" = "Uncaged")) %>%
arrange(as.numeric(New.Tile.Number))
str(metadata)
metadata$Original.Tile.Number <-as.character(metadata$Original.Tile.Number)
metadata$New.Tile.Number <-as.character(metadata$New.Tile.Number)
# Clean up the data
coral.2013_wide <- coral_2013 %>%
filter(!Tile_Number %in% c(21:24, 141:146, 177:180, 77:80, 19:24,41:48)) %>%
# filter tiles that weren't surveyed
mutate_all(funs(replace_na(.,0))) %>%
# replace NAs with zero
mutate(Year = "2013") %>%
# create a new column for year
mutate(Depth= ifelse(Transect %in% "upslope", "Shallow",
ifelse(Transect %in% "downslope", "Deep", "Middle"))) %>%
# new column for depth
mutate(All.corals = (All.Divots + Flat.Surface)) %>%
# new column of all the corals
mutate(Small.Divot=replace(Small.Divot, Tile_Number
%in% c(121,122,123,124), NA)) %>%
# small vs large divots not differentiated for these tiles
mutate(Large.Divot=replace(Large.Divot, Tile_Number
%in% c(121,122,123,124), NA)) %>%
# small vs large divots not differentiated for these tiles
dplyr::select(Date, Year, Location, Transect, Depth,
Tile_Number:All.Divots, All.corals,Notes) %>%
# reorder
dplyr::rename(Original.Tile.Number = Tile_Number) %>%
mutate(Treatment = ifelse(Treatment == "open", "Uncaged", "Caged")) %>%
dplyr::select(-Transect) %>%
dplyr::rename(Flat.surface = Flat.Surface) %>%
dplyr::rename(Large.divot = Large.Divot) %>%
dplyr::rename(Small.divot = Small.Divot) %>%
dplyr::rename(All.divots = All.Divots)
# rename
str(coral.2013_wide)
coral.2013_wide$Original.Tile.Number <- as.character(coral.2013_wide$Original.Tile.Number)
# Long Version
coral.2013_long <- coral.2013_wide %>%
pivot_longer(-c(Date:Treatment, All.divots:Notes),
names_to= "Tile.Placement", values_to= "Corals") %>%
filter(Corals != "NA") # get rid of tiles that didn't distinguish between large and small divots
# Combine data with the cleaned up metadata
str(coral.2013_long)
str(metadata)
coral.2013_long <- dplyr::inner_join(coral.2013_long, metadata, by="Original.Tile.Number") %>%
dplyr::select(-Treatment.y, -Depth.y) %>%
dplyr::rename(Treatment = Treatment.x) %>%
dplyr::rename(Depth = Depth.x)
coral.2013_wide <- spread(coral.2013_long, Tile.Placement, Corals) %>%
arrange(as.numeric(Original.Tile.Number))
# Filtered dataset without the 2013 tiles that didn't record where the coral was
coral.2013.models_long <- coral.2013_wide %>%
dplyr::select(-Notes) %>%
filter(Large.divot != "NA") %>% # get rid of the 2013 tiles that didn't record where the coral was (refilter them because of new wide df)
pivot_longer(-c(Date:New.Site),
names_to= "Tile.Placement", values_to= "Corals")
# Long dataset with all divots vs flat surface (no small vs large and no edge)
coral.2013.divot.flat_long <- coral.2013_wide %>%
dplyr::select(-Notes, -Small.divot, -Large.divot, -All.corals) %>%
pivot_longer(-c(Date:Treatment, New.Tile.Number:New.Site),
names_to= "Tile.Placement", values_to= "Corals")
# Break up 2014 and 2016
coral_2014.2016_clean <- coral_2014.2016 %>%
remove_empty() %>%
# remove empty rows and columns
mutate(Year= ifelse(str_detect(Date, "/14"), "2014", "2016")) %>%
# new column
mutate(New.Tile.Number = str_sub(Tile.number, 1, 3)) %>%
# take the first 3 characters
mutate(Original.Tile.Number = stringr::str_sub(Tile.number, -3 )) %>%
# extract the last 3 characters
mutate(Original.Tile.Number = str_replace(Original.Tile.Number, '\\)', '')) %>%
# clean up the )
mutate(Depth = ifelse(Depth == "Mid", "Middle", Depth)) %>%
# fix mid to middle
dplyr::select(Tile.number, Original.Tile.Number, New.Tile.Number, Year, Date:Notes.from.data.sheet.2014) %>%
# reorder
mutate(Location = ifelse(Site %in% "F3", "FR3",
ifelse(Site %in% "F7", "FR7",
ifelse(Site %in% "F9", "FR9",
ifelse(Site %in% "FR3", "FR3",
ifelse(Site %in% "FR7", "FR7", "FR9"))))))
# Combine with metadata for tile pair
coral_2014.2016_clean_metadata <-  dplyr::inner_join(coral_2014.2016_clean,
metadata, by="Original.Tile.Number")%>%
dplyr::select(-Treatment.y, -Depth.y, -New.Tile.Number.y, -Site.y) %>%
dplyr::rename(Treatment = Treatment.x) %>%
dplyr::rename(Depth = Depth.x) %>%
dplyr::rename(New.Tile.Number = New.Tile.Number.x)%>%
dplyr::rename(Site = Site.x)
# Separate by Year
coral_2014 <- coral_2014.2016_clean_metadata %>%
filter(Year == "2014") %>%
filter(!Original.Tile.Number %in% c("27", "47"))
# remove tiles that were not measured?
coral_2016 <- coral_2014.2016_clean_metadata %>%
filter(Year == "2016")
# Count the number of corals for each tile (ALL CORALS)
coral.2014 <- coral_2014 %>%
mutate(Convert = ifelse(Polyp.. %in% NA, NA, "1")) %>%
# convert all the numbers to 1 so you can sum them
group_by(Year, Location, Depth, Treatment, Tile.number, Original.Tile.Number, New.Tile.Number) %>%
dplyr::summarize(All.corals = sum(!is.na(Convert))) %>%
# don't count the NAs (they go to 0)
dplyr::arrange(as.numeric(New.Tile.Number)) %>%
ungroup()
# 175 tiles because we filtered out two tiles and two tiles were not measured (3 and 4)
# looks good (8Feb2022)
unique(coral_2014$Substrate..Flat..edge..divot.)
# Count the number of corals for each tile (divots vs flat), not differentiating between large and small divots
coral.divots_2014 <- coral_2014 %>%
mutate(Substrate..Flat..edge..divot.=
dplyr::recode(Substrate..Flat..edge..divot., "divot " = "divot",
.default = Substrate..Flat..edge..divot.)) %>%
# fix naming issue
mutate(Convert = ifelse(Polyp.. %in% NA, NA, "1")) %>%
# convert all the numbers to 1 so you can sum them
group_by(Year, Location, Depth, Treatment,
Tile.number, Original.Tile.Number, New.Tile.Number, Pair,
Substrate..Flat..edge..divot.) %>%
dplyr::summarize(Corals = sum(!is.na(Convert))) %>%
# count up all the corals in divot vs flat, etc
arrange(as.numeric(New.Tile.Number)) %>%
ungroup() %>%
pivot_wider(names_from = Substrate..Flat..edge..divot.,
values_from = Corals) %>%
# make the df wide
dplyr::select(-"NA") %>%
# get rid of the NA column
mutate_all(funs(replace_na(.,0)))
# replace NAs with zero
# Make a long version (not differentiating between large and small divots)
coral.divots_2014.long <- coral.divots_2014 %>%
pivot_longer(-c(Year:New.Tile.Number,Pair),
names_to = "Tile.placement",
values_to = "Corals")
# Small vs large divots
coral_2014.divot.size <- coral_2014 %>%
mutate(Substrate..Flat..edge..divot.=
dplyr::recode(Substrate..Flat..edge..divot., "divot " = "divot",
.default = Substrate..Flat..edge..divot.)) %>%
# fix naming issue
mutate(Convert = ifelse(Polyp.. %in% NA, NA, "1")) %>%
mutate(Divot.Size = ifelse(divot.. %in% c(10,11), "Large.divot",
ifelse(divot.. %in% c(1:9), "Small.divot",
ifelse(Substrate..Flat..edge..divot. %in% "flat", "Flat",
ifelse(Substrate..Flat..edge..divot. %in% "edge", "Edge", NA))))) %>%
# convert all the numbers to 1 so you can sum them
# We know that divots 10 and 11 are large, 1-9 are small
group_by(Year, Location, Depth, Treatment,
Tile.number, Original.Tile.Number, New.Tile.Number,
Divot.Size) %>%
dplyr::summarize(Corals = sum(!is.na(Convert))) %>%
# count up all the corals in divot vs flat, etc
arrange(as.numeric(New.Tile.Number)) %>%
ungroup() %>%
pivot_wider(names_from = Divot.Size,
values_from = Corals) %>%
# wide so you can get zeros for the not counted
dplyr::select(-"NA") %>%
# get rid of the NA column
mutate_all(funs(replace_na(.,0)))
# replace NAs with zero
# Make a long version
coral_2014.divot.size.long <- coral_2014.divot.size  %>%
pivot_longer(-c(Year:New.Tile.Number),
names_to = "Tile.placement",
values_to = "Corals")
# Make one full coral DF with all the data
# So now this has divot size separated, but also has a column of summed up divots as "All.divots", and a column "All.corals"
coral.2014_wide <- coral.divots_2014 %>%
# this has all.divots column
dplyr::select(New.Tile.Number,Pair, flat, divot, edge) %>%
# select only a few columns
inner_join(coral.2014, by="New.Tile.Number") %>%
# this has the all.corals column
inner_join(coral_2014.divot.size[c("New.Tile.Number","Small.divot", "Large.divot")],
by="New.Tile.Number") %>%
# this has the divots size (small vs. large)
relocate(flat, .after = "Large.divot")%>%
relocate(divot, .after = "Large.divot")%>%
relocate(edge, .after = "Large.divot") %>%
relocate(Tile.number:Original.Tile.Number, .after = New.Tile.Number) %>%
dplyr::rename(Flat.surface = flat) %>%
dplyr::rename(All.divots = divot) %>%
dplyr::rename(Edge = edge) %>%
mutate(Treatment = ifelse(Treatment %in% "caged", "Caged", "Uncaged"))
# Long Version (getting rid of all.corals and all.divots)
coral.2014_long <- coral.2014_wide %>%
pivot_longer(-c(New.Tile.Number:Treatment, All.corals,All.divots),
names_to= "Tile.Placement", values_to= "Corals")
# Long dataset with all divots vs flat surface (no small vs large and no edge)
coral.2014.divot.flat_long <- coral.2014_wide %>%
pivot_longer(-c(New.Tile.Number:Treatment, All.corals:Edge),
names_to= "Tile.Placement", values_to= "Corals") %>%
select(-c(All.corals:Edge))
# Count the number of corals for each tile (ALL CORALS)
coral.2016 <- coral_2016 %>%
mutate(Convert = ifelse(Polyp.. %in% NA, NA, "1")) %>%
# convert all the numbers to 1 so you can sum them
group_by(Year, Location, Depth, Treatment, Pair, Tile.number, Original.Tile.Number, New.Tile.Number) %>%
dplyr::summarize(All.corals = sum(!is.na(Convert))) %>%
# don't count the NAs (they go to 0)
arrange(as.numeric(New.Tile.Number)) %>%
ungroup()
# 138 tiles
# looks good (8Feb2022)
# Divots vs edge, etc.
coral.divots_2016 <- coral_2014.2016_clean_metadata %>%
filter(Year == "2016") %>%
mutate(Substrate..Flat..edge..divot.=
dplyr::recode(Substrate..Flat..edge..divot., "divot " = "divot",
.default = Substrate..Flat..edge..divot.)) %>%
# fix naming issue
mutate(Substrate..Flat..edge..divot.=
dplyr::recode(Substrate..Flat..edge..divot., "edge/flat" = "flat/edge",
.default = Substrate..Flat..edge..divot.)) %>%
# fix naming issue
mutate(Convert = ifelse(Polyp.. %in% NA, NA, "1")) %>%
# convert all the numbers to 1 so you can sum them
group_by(Year, Location, Depth, Treatment, Tile.number, Original.Tile.Number, Pair,
New.Tile.Number, Substrate..Flat..edge..divot.) %>%
dplyr::summarize(Corals = sum(!is.na(Convert))) %>%
# count up all the corals in divot vs flat, etc
arrange(as.numeric(New.Tile.Number)) %>%
ungroup() %>%
pivot_wider(names_from = Substrate..Flat..edge..divot.,
values_from = Corals) %>%
# wide so you can get zeros for the not counted
dplyr::select(-"NA") %>%
# get rid of the NA column
mutate_all(funs(replace_na(.,0)))
# replace NAs with zero
# 138 tiles
# Make a long version
coral.divots_2016.long <- coral.divots_2016 %>%
pivot_longer(-c(Year:New.Tile.Number,Pair),
names_to = "Tile.placement",
values_to = "Corals")
unique(coral_2014.2016_clean$Substrate..Flat..edge..divot.) # lets ignore the corals on the plate, now there is a new placement called "flat/edge" that has a lot of corals
# small vs large divots
coral_2016.divot.size <- coral_2014.2016_clean_metadata %>%
filter(Year == "2016") %>%
mutate(Substrate..Flat..edge..divot.=
dplyr::recode(Substrate..Flat..edge..divot., "divot " = "divot",
.default = Substrate..Flat..edge..divot.)) %>%
mutate(Substrate..Flat..edge..divot.=
dplyr::recode(Substrate..Flat..edge..divot., "edge/flat" = "flat/edge",
.default = Substrate..Flat..edge..divot.)) %>%
# fix naming issue
mutate(Convert = ifelse(Polyp.. %in% NA, NA, "1")) %>%
# convert all the numbers to 1 so you can sum them
mutate(Divot.Size = ifelse(divot.. %in% c(10,11), "Large.divot",
ifelse(divot.. %in% c(1:9), "Small.divot",
ifelse(Substrate..Flat..edge..divot. %in% "flat", "Flat",
ifelse(Substrate..Flat..edge..divot. %in% "flat/edge", "Edge", ifelse(Substrate..Flat..edge..divot. %in% "edge", "Edge", NA)))))) %>%
# making all the flat/edge == edge
# new column with divot size
group_by(Year, Location, Depth, Treatment,
Tile.number, Original.Tile.Number,Pair, New.Tile.Number,
Divot.Size) %>%
dplyr::summarize(Corals = sum(!is.na(Convert))) %>%
# count up all the corals in divot vs flat, etc
arrange(as.numeric(New.Tile.Number)) %>%
ungroup() %>%
pivot_wider(names_from = Divot.Size,
values_from = Corals) %>%
# wide so you can get zeros for the not counted
dplyr::select(-"NA") %>%
# get rid of the NA column
mutate_all(funs(replace_na(.,0)))
# replace NAs with zero
# 138 tiles again
# Make a long version
coral_2016.divot.size.long <- coral_2016.divot.size  %>%
pivot_longer(-c(Year:New.Tile.Number,Pair),
names_to = "Tile.placement",
values_to = "Corals")
# Make one full coral DF with all the data
coral.2016_wide <- coral.divots_2016 %>%
dplyr::select(New.Tile.Number:"flat/edge") %>% # corals per tile placement
inner_join(coral.2016, by="New.Tile.Number") %>% # this has all.corals summed
inner_join(coral_2016.divot.size[c("New.Tile.Number","Small.divot", "Large.divot")],
by="New.Tile.Number") %>% # only take large and small divot because the other dfs already have the other info
relocate(flat, .after = "Large.divot")%>%
relocate(divot, .after = "All.corals")%>%
relocate(edge, .after = "Large.divot") %>%
relocate("flat/edge", .after = "Large.divot") %>%
relocate(Tile.number:Original.Tile.Number, .after = New.Tile.Number) %>%
# change positions to make it easier to read
dplyr::rename(Flat.surface = flat) %>%
dplyr::rename(All.divots = divot) %>%
dplyr::rename(Edge = edge) %>%
dplyr::rename(Flat.Edge = "flat/edge") %>%
mutate(Treatment = ifelse(Treatment %in% "caged", "Caged", "Uncaged")) %>%
mutate(Edge.final = Edge + Flat.Edge) %>%
dplyr::select(-"plate") # get rid of any corals on the baseplate
# 138 tiles
# Long Version
coral.2016_long <- coral.2016_wide %>%
pivot_longer(-c(Pair,New.Tile.Number:Treatment, All.corals, All.divots),
names_to= "Tile.Placement", values_to= "Corals") %>%
dplyr::select(-All.corals, -All.divots)
# Long dataset with all divots vs flat surface (no small vs large and no edge)
coral.2016.divot.flat_long <- coral.2016_wide %>%
pivot_longer(-c(New.Tile.Number:All.corals, Small.divot:Edge),
names_to= "Tile.Placement", values_to= "Corals") %>%
select(-All.corals, -Small.divot, -Large.divot, -Edge)
# Combine 2013, 2014 and 2016 coral recruit data
combine_coral2013 <- coral.2013_wide %>%
dplyr::select(Year, Location, Depth, Treatment, Original.Tile.Number,
Large.divot, Small.divot, Flat.surface, All.corals, All.divots)
combine_coral2014 <- coral.2014_wide %>%
dplyr::select(Year, Location, Depth, Treatment, Original.Tile.Number, All.corals:Flat.surface) %>%
relocate(c("Large.divot", "Small.divot", "Flat.surface", "All.corals"), .after= Treatment)
# this has edge while 2013 doesn't
combine_coral2016 <- coral.2016_wide %>%
dplyr::select(Year, Location, Depth, Treatment, Original.Tile.Number, All.corals:Flat.surface)%>%
relocate(c("Large.divot", "Small.divot", "Flat.surface", "All.corals"), .after= Treatment)
# this has flat/edge and edge
coral.ALL_wide <- bind_rows(combine_coral2013, combine_coral2014, combine_coral2016) %>%
dplyr::relocate("Original.Tile.Number", .before= Year)
# Note: edge isn't measured in 2013 so it is NA
# Long Version
coral.ALL_long <- coral.ALL_wide %>%
filter(Large.divot != "NA") %>% # filter out the 2013 that didn't differentiate
pivot_longer(-c(Original.Tile.Number:Treatment,
All.divots, All.corals), # because 2013 doesn't measure edge
names_to= "Tile.Placement", values_to= "Corals")
########## Just 2014 and 2016 ###########
# Since 2013 is different (maybe over counted?) and doesn't have "edge" as an option
# this is mainly for the models
# all corals only (for the cover ms figure)
all.corals.2014.2016 <- bind_rows(coral.2014, coral.2016)
# Wide
coral.2014.2016_wide <- bind_rows(combine_coral2014, combine_coral2016) %>%
dplyr::relocate("Original.Tile.Number", .before= Year)
# Long
coral.2014.2016_long <- coral.2014.2016_wide %>%
pivot_longer(-c(Original.Tile.Number:Treatment, All.corals, All.divots),
names_to= "Tile.Placement", values_to= "Corals")
# Coral IDs
# 2014
coral.id.2014$Tile_ID <- as.character(coral.id.2014$Tile_ID)
coral.id.2014 <- coral.id.2014 %>%
dplyr::select(-c(site, caged, depth, X:X.7)) %>%
dplyr::rename(New.Tile.Number = Tile_ID) %>%
mutate(taxo_ID = ifelse(taxo_ID == "unkown", "unknown", taxo_ID)) %>%
inner_join(metadata, by="New.Tile.Number")
# Coral IDs
# 2016
coral.id.2016$Tile_ID <- as.character(coral.id.2016$Tile_ID)
coral.id.2016 <- coral.id.2016 %>%
dplyr::select(-c(site, caged, depth)) %>%
dplyr::rename(New.Tile.Number = Tile_ID) %>%
mutate(taxo_ID = ifelse(taxo_ID == "unkown", "unknown", taxo_ID)) %>%
inner_join(metadata, by="New.Tile.Number")
# Note: need to combine all the POC ids in 2016
# This plot is in the cover manuscript!
mean.corals <- all.corals.2014.2016 %>%
group_by(Treatment, Year) %>%
summarise(sum= sum(All.corals),
mean=mean(All.corals),
se=std.error(All.corals))
cols <- c("#29AF7FFF", "#440154FF") # trying out cols
p_corals_all <- ggplot(mean.corals, aes(Year, mean, fill=Treatment)) +
geom_bar(position = "dodge", stat='identity')+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2,
position=position_dodge(.9)) +
theme_pubr(base_size = 16) +
labs(y= "Coral Recruit Abundance (Mean +/- SE)")+
scale_fill_manual(values=cols)+
scale_x_discrete(labels=c("2014" = "Year 1", "2016" = "Year 3"))
p_corals_all
p_corals_all <- ggplot(mean.corals, aes(Year, mean, fill=Treatment)) +
geom_bar(position = "dodge", stat='identity')+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2,
position=position_dodge(.9)) +
theme_pubr(base_size = 16) +
labs(y= "Coral Recruit Abundance (Mean +/- SE)", x="")+
scale_fill_manual(values=cols)+
scale_x_discrete(labels=c("2014" = "Year 1", "2016" = "Year 3"))
p_corals_all
ggsave(file= "../figures/corals/coral-abundance-over-time.png",
plot=p_corals_all,
height= 6,
width= 9)
